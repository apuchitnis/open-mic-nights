{"version":3,"sources":["index.js"],"names":["GoogleSpreadsheet","require","SelectColumnFilter","column","filterValue","setFilter","preFilteredRows","id","options","React","useMemo","Set","forEach","row","add","values","value","onChange","e","target","undefined","map","option","i","TableAndMap","useState","headerValues","rows","isFetching","data","setData","useEffect","a","doc","useApiKey","loadInfo","sheet","sheetsByIndex","getRows","console","log","rowsData","item","RowNumber","rowNumber","Bringer","FacebookPage","Frequency","Name","Venue","Latitude","Longitude","columns","Header","accessor","Filter","acccessor","filterTypes","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","useTable","useFilters","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","className","Map","results","headerGroup","getHeaderGroupProps","headers","getHeaderProps","style","borderBottom","background","color","fontWeight","render","canFilter","getRowProps","cells","cell","getCellProps","padding","border","InfoWindow","props","name","position","bottom","left","textAlign","width","backgroundColor","boxShadow","fontSize","zIndex","MapMarker","markerStyle","borderRadius","height","this","show","cursor","Component","_onChildClick","key","childProps","setState","index","findIndex","original","parseInt","prevProps","result","bootstrapURLKeys","defaultCenter","lat","lng","defaultZoom","onChildClick","App","href","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.d42ec268.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport './styles.css';\r\nimport { useFilters, useTable } from 'react-table'\r\n\r\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      options.add(row.values[id])\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n\r\nfunction TableAndMap() {\r\n  const [data, setData] = useState({ headerValues: null, rows: [], isFetching: false });\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      try {\r\n        setData({ ...data, isFetching: true });\r\n\r\n        const doc = new GoogleSpreadsheet('1uwHo4bGisUiQgwAnkFbVUZG2fabZD-uwaNx4JHlWnSs');\r\n        doc.useApiKey(\"AIzaSyDWzk5MJLYVpzppXB9xxJWjVJnoe97erbc\");\r\n        await doc.loadInfo();\r\n\r\n        const sheet = doc.sheetsByIndex[0]\r\n        const rows = await sheet.getRows()\r\n\r\n        setData({ headerValues: sheet.headerValues, rows: rows, isFetching: false });\r\n      } catch (e) {\r\n        console.log(e);\r\n        setData({ ...data, isFetching: false });\r\n      }\r\n    }());\r\n  }, []);\r\n\r\n  const rowsData = React.useMemo(\r\n    () => {\r\n      if (!data.isFetching && data.headerValues != null) {\r\n        return data.rows.map((item) => {\r\n          return {\r\n            RowNumber: item.rowNumber,\r\n            Bringer: item.Bringer,\r\n            FacebookPage: item.FacebookPage,\r\n            Frequency: item.Frequency,\r\n            Name: item.Name,\r\n            Venue: item.Venue,\r\n            Latitude: item.Latitude,\r\n            Longitude: item.Longitude,\r\n          }\r\n        })\r\n      }\r\n\r\n      return []\r\n    },\r\n    [data]\r\n  )\r\n\r\n  const columns = React.useMemo(\r\n    () => {\r\n      if (!data.isFetching && data.headerValues != null) {\r\n        // return data.headerValues.map((item) => { return { Header: item, accessor: item }; })\r\n        return [\r\n          {\r\n            Header: 'Bringer',\r\n            accessor: 'Bringer',\r\n            Filter: SelectColumnFilter,\r\n          },\r\n          {\r\n            Header: 'Facebook Page',\r\n            accessor: 'FacebookPage',\r\n          },\r\n          {\r\n            Header: 'Frequency',\r\n            accessor: 'Frequency',\r\n          },\r\n          {\r\n            Header: 'Name',\r\n            accessor: 'Name',\r\n          },\r\n          {\r\n            Header: 'Venue',\r\n            accessor: 'Venue',\r\n          },\r\n          {\r\n            Header: 'Latitude',\r\n            accessor: 'Latitude',\r\n          },\r\n          {\r\n            Header: 'Longitude',\r\n            accessor: 'Longitude',\r\n          },\r\n          {\r\n            Header: 'RowNumber',\r\n            acccessor: 'RowNumber',\r\n          }\r\n        ]\r\n      }\r\n\r\n      return []\r\n    },\r\n    [data]\r\n  )\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n              .toLowerCase()\r\n              .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      Filter: SelectColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    state,\r\n  } = useTable({ columns, data: rowsData, defaultColumn, filterTypes }, useFilters)\r\n\r\n  return (\r\n    <div>\r\n      <span className=\"map\">\r\n        <Map\r\n          results={rows}\r\n        />\r\n      </span>\r\n      <span className=\"table\">\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th\r\n                    {...column.getHeaderProps()}\r\n                    style={{\r\n                      borderBottom: 'solid 3px red',\r\n                      background: 'aliceblue',\r\n                      color: 'black',\r\n                      fontWeight: 'bold',\r\n                    }}\r\n                  >\r\n                    {column.render('Header')}\r\n                    <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps()}\r\n                        style={{\r\n                          padding: '10px',\r\n                          border: 'solid 1px gray',\r\n                          background: 'papayawhip',\r\n                        }}\r\n                      >\r\n                        {cell.render('Cell')}\r\n                      </td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InfoWindow = (props) => {\r\n  const { name } = props;\r\n  const infoWindowStyle = {\r\n    position: 'relative',\r\n    bottom: 50,\r\n    left: '-45px',\r\n    textAlign: 'center',\r\n    width: 220,\r\n    backgroundColor: 'white',\r\n    boxShadow: '0 2px 7px 1px rgba(0, 0, 0, 0.3)',\r\n    padding: 10,\r\n    fontSize: 14,\r\n    zIndex: 100,\r\n  };\r\n\r\n  return (\r\n    <div style={infoWindowStyle}>\r\n      <div style={{ fontSize: 16 }}>\r\n        {name}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass MapMarker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const markerStyle = {\r\n      border: '1px solid white',\r\n      borderRadius: '50%',\r\n      height: 20,\r\n      width: 20,\r\n      backgroundColor: this.props.show ? 'red' : 'blue',\r\n      cursor: 'pointer',\r\n      zIndex: 10,\r\n    };\r\n    return (\r\n      <div style={markerStyle}>\r\n        {this.props.show && <InfoWindow name={this.props.name} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      results: [],\r\n    }\r\n  }\r\n\r\n  _onChildClick = (key, childProps) => {\r\n    this.setState((state) => {\r\n      let index = state.results.findIndex(e => e.show);\r\n      if (index > 0 && state.results[index].original.RowNumber != parseInt(key)) {\r\n        state.results[index].show = false;\r\n      }\r\n      index = state.results.findIndex(e => e.original.RowNumber == parseInt(key));\r\n      state.results[index].show = !state.results[index].show; // eslint-disable-line no-param-reassign\r\n      return { results: state.results };\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.results != prevProps.results) {\r\n      this.setState(() => {\r\n        const newState = this.props.results.map(result => ({ ...result, show: false }));\r\n        return { results: newState };\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div id=\"map\">\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: 'AIzaSyB2xTrXYV7Y6bN1BVVPrt2ZUglBPTZ-2S4' }}\r\n          defaultCenter={{ lat: 51.5074, lng: -0.05 }}\r\n          defaultZoom={14}\r\n          onChildClick={this._onChildClick}\r\n        >\r\n          {this.state.results.map((item) =>\r\n            <MapMarker\r\n              key={item.original.RowNumber}\r\n              lat={item.original.Latitude}\r\n              lng={item.original.Longitude}\r\n              name={item.original.Name}\r\n              show={item.show}\r\n            />,\r\n          )}\r\n        </GoogleMapReact>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Search Open Mic Nights in London\r\n      </h1>\r\n      <nav>\r\n        <TableAndMap />\r\n      </nav>\r\n      <h5>\r\n        Website created with ❤ by <a href=\"https://github.com/apuchitnis\">@apuchitnis</a>. Thanks to GC for compiling all of the data.\r\n      </h5>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById('app');\r\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}